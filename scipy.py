# -*- coding: utf-8 -*-
"""Scipy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bapbpE8dB4rElBMX1q4jniRRYW33qLXX
"""

pip install scipy

import scipy
#Example: Integration using quad function
from scipy import integrate
result,error=integrate.quad(lambda x:x**2,0,1)
print("Result=",result)
print("Erroe",error)

import numpy as np
from scipy import interpolate
import matplotlib.pyplot as plt
#Interpolation
x_data=np.array([0,1,2,3,4])
y_data=np.array([0,2,1,3,5])
interp_func=interpolate.interp1d(x_data,y_data,kind='linear')
interp_result=interp_func(2.5)
print("Interpolation Result:",interp_result)
plt.plot(x_data,y_data,linewidth='3',color="red")

square=lambda x:x**2
from scipy import optimize
#Optimization
result_optimization=optimize.minimize_scalar(lambda x:x**2+3*x+5)
print("Optimization Result",result_optimization.x)

import numpy as np
import pandas as pd
import scipy.stats as stats
import statsmodels.api as sm

#Generate sample data
import random
np.random.seed(0)
data=pd.DataFrame({
    'Treatment':np.random.choice(['A','B','C'],size=10),'Score':np.random.normal(loc=10,scale=2,size=10)
    })
print(data)
random.seed(0)
print(random.random())
print(random.random())

#Hypothesis testing (t-Test)
group_A=data[data['Treatment']=='A']['Score']
group_B=data[data['Treatment']=='B']['Score']
t_stat,p_value=stats.ttest_ind(group_A,group_B)
print("t-statistics",t_stat)
print("p-value:",p_value)
f_stat,p_value=stats.f_oneway(data[data['Treatment']=='A']['Score'],
                              data[data['Treatment']=='B']['Score'])
print("F-Statistics:",f_stat)
print("p-value:",p_value)

import numpy as np
import pandas as pd
import scipy.stats as stats
import statsmodels.api as sm
#Generate sample data
import random
np.random.seed(10)
data1=pd.DataFrame({
    'Sal':np.random.normal(loc=12,scale=3,size=10),'Bonus':np.random.normal(loc=10,scale=2,size=10)
                  })
print(data1)
#Hypothesis testing (t-Test)
group_A=data1['Sal']
group_B=data1['Bonus']
t_stat,p_value=stats.ttest_ind(group_A,group_B)
#Mean
a=data1['Sal'].mean()
b=data1['Bonus'].mean()
print("t-statistics",t_stat)
print("p-value:",p_value)

print("Mean of A:",a)
print("Mean of B:",b)

#ANOVA (One-way ANOVA)
f_stat,p_value=stats.f_oneway(data[data['Treatment']=='A']['Score'],
                              data[data['Treatment']=='B']['Score'],
                              data[data['Treatment']=='C']['Score'])
print("F-Statistics:",f_stat)
print("p-value:",p_value)

#Regression Analysis (simple Linear Regression)
import statsmodels.api as sm
X=sm.add_constant(data['Treatment'].replace({'A':0,'B':1,'C':2}))
model=sm.OLS(data['Score'],X)
results=model.fit()
print(results.summary())

import numpy as np
import statsmodels.api as sm
# Sample data
X = np.array([1, 2, 3, 4, 5])  # Independent variable
y = np.array([2, 4, 5, 4, 5])  # Dependent variable
# Add a constant to the independent variable (for intercept estimation)
X = sm.add_constant(X)
# Create OLS model
model = sm.OLS(y, X)
# Fit the model
results = model.fit()
# Print summary of results
print(results.summary())